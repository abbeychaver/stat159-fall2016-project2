library(xtable)
xtable(mult_regression_summary)
mult_regression_summary$f.statistic
mult_regression_summary$fstatistic
mult_regression_summary$fstatistic[1]
setwd("~/Documents/stat159/stat159-fall2016-project2")
data <- read.csv("data/Credit.csv", header=TRUE, row.names = 1)
library(pander)
library(ggplot2)
descr_stats <- function(col, name) {
names <- c("Minimum", "Maximum", "Range", "Median", "First Quartile","Third Quartile",
"Interquartile Range", "Mean", "Standard Deviation")
minimum = min(col)
maximum = max(col)
range = maximum- minimum
median = median(col)
first_q = quantile(col, 0.25)
third_q = quantile(col, 0.75)
IQR <- IQR(col)
mean <- mean(col)
sd <- sd(col)
vals <- c(minimum, maximum, range, median, first_q, third_q,
IQR, mean, sd)
sink(paste("data/Summary_", name, ".txt", sep=""))
pander(data.frame(names, vals))
sink()
path = paste("images/Histogram_", name, ".png", sep="")
png(filename = path)
hist(col, main = paste("Histogram for ", name))
dev.off()
path = paste("images/Boxplot_", name, ".png", sep="")
png(filename=path)
boxplot(col, main = paste("Boxplot for ", name))
dev.off()
}
for (i in 1:6) {
col <- data[, i]
name <- colnames(data)[i]
descr_stats(col, name)
}
qual_descr <- function(col, name) {
sink(paste("data/Summary_", name, ".txt", sep=""))
pander(table(col))
pander(table(col)/nrow(data))
sink()
path = paste("images/Barplot_", name, ".png", sep="")
png(filename=path)
barplot(table(col), col="light blue", border = "white", main = paste("Frequency for", name))
}
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
View(data)
barplot(table(data[, 7]))
barplot(table(data$Ethnicity))
?barplot
plot(mtcars$mpg)
plot(mtcars)
plot(mtcars)
dev.off()
plot(mtcars)
plot(cars)
dev.off()
dev.off()
dev.off()
plot(mtcars)
barplot(table(data[,7]))
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
qual_descr <- function(col, name) {
sink(paste("data/Summary_", name, ".txt", sep=""))
pander(table(col))
pander(table(col)/nrow(data))
sink()
path = paste("images/Barplot_", name, ".png", sep="")
png(filename=path)
barplot(table(col), col="light blue", border = "white", main = paste("Frequency for", name))
}
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
data[,7]
data[,8]
data[,6]
data[,9]
data[,10]
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
barplot(table(data[,9]))
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
# Scatterplot matrix
quant_data <- data[, c(1:6, 11)]
png(filename = "images/correlation_scatterplot.png")
plot(quant_data)
dev.off()
sink("data/correlations.txt")
pander(cor(quant_data))
sink()
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
dev.off
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
for (i in 1:6) {
col <- data[, i]
name <- colnames(data)[i]
descr_stats(col, name)
}
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
dev.off()
dev.off()
dev.off()
dev.off()
for (i in 1:6) {
col <- data[, i]
name <- colnames(data)[i]
descr_stats(col, name)
}
dev.off()
qual_descr <- function(col, name) {
sink(paste("data/Summary_", name, ".txt", sep=""))
pander(table(col))
pander(table(col)/nrow(data))
sink()
path = paste("images/Barplot_", name, ".png", sep="")
png(filename=path)
barplot(table(col), col="light blue", border = "white", main = paste("Frequency for", name))
dev.off()
}
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
qual_descr(col, name)
}
quant_data <- data[, c(1:6, 11)]
png(filename = "images/correlation_scatterplot.png")
plot(quant_data)
dev.off()
sink("data/correlations.txt")
pander(cor(quant_data))
sink()
data$Gender <- factor(data$Gender)
data$Student <- factor(data$Student)
data$Married <- factor(data$Married)
data$Ethnicity <- factor(data$Ethnicity)
sink("data/anova.txt")
fit <- aov(data$Balance ~ data$Gender+data$Student+data$Married+data$Ethnicity)
fit
summary(fit)
sink()
for (i in c(1:6, 11))
dfl
c(1:6, 11)
for (i in c(1:6, 11)) {
col <- data[, i]
name <- colnames(data)[i]
descr_stats(col, name)
}
library(fields)
install.packages("fields")
library(fields)
png
bplot.xy(data$Gender, data$Balance)
bplot.xy(data$Balance, data$Gender)
bplot.xy(data$Gender, data$Balance)
minitri
bplot.xy( minitri$swim, minitri$run, N=5)
data$Gender
boxplot(data$Balance ~ data$Gender, col="lightblue")
cond_boxplot <- function(col, name) {
path = paste("images/Conditional_Boxplot_Balance_", name, ".png", sep="")
png(filename=path)
boxplot(data$Balance ~ col, col="lightblue")
dev.off()
}
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
cond_boxplot(col, name)
}
cond_boxplot <- function(col, name) {
path = paste("images/Conditional_Boxplot_Balance_", name, ".png", sep="")
png(filename=path)
boxplot(data$Balance ~ col, col="lightblue", main=paste("Boxplot of Balance and ", name))
dev.off()
}
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
cond_boxplot(col, name)
}
cond_boxplot <- function(col, name) {
path = paste("images/Conditional_Boxplot_Balance_", name, ".png", sep="")
png(filename=path)
boxplot(data$Balance ~ col, col="lightblue", main=paste("Boxplot of Balance and", name))
dev.off()
}
for (i in 7:10) {
col <- data[, i]
name <- colnames(data)[i]
cond_boxplot(col, name)
}
new_data <- model.matrix(Balance ~ ., data=data)
new_data
new_data <- cbind(new_data[ ,-1], Balance = data$Balance)
new_data
head(new_data)
scaled_data <- scale(new_data, center = TRUE, scale = TRUE)
head(scaled_data)
write.csv(scaled_data, file = "data/scaled-credit.csv")
set.seed(1234)
floor = 300
scaled_data <- scaled_data[sample(400),]
training_data <- scaled_data[1:300, ]
write.csv(training_data, file = "data/training-credit.csv")
test_data <- scaled_data[301:400, ]
write.csv(test_data, file = "data/test-credit.csv")
head(test_data)
library(glmnet)
install.packages("glmet")
install.packages("glmnet")
grid=10^seq(10,-2,length=100)
scaled_data <- read.csv("data/scaled-credit.csv")
head(scaled_data)
balance = scaled_data$Balance
lasso.mod=glmnet(scaled_data,balance,alpha=1,lambda=grid)
library(glmnet)
install.packages("glmnet")
limbrary(glmnet)
scaled_data <- read.csv("data/scaled-credit.csv")
balance = scaled_data$Balance
grid=10^seq(10,-2,length=100)
lasso.mod=glmnet(scaled_data,balance,alpha=1,lambda=grid)
x = model.matrix(Balanceâˆ¼., scaled_data)[,-1]
x = model.matrix(Balance ~ ., scaled_data)[,-1]
y = scaled_data$Balance
grid=10^seq(10,-2,length=100)
lasso.mod=glmnet(x, y, alpha=1, lambda=grid)
lasso.mod
lasso.mod=cv.glmnet(x, y, alpha=1, lambda=grid)
head(lasso.mod)
lasso_mod = cv.glmnet(x, y, alpha=1, lambda=grid)
save(lasso_mod, file="data/lasso.RData")
best_lambda = lasso_mod$lambda.min
best_lambda
library(glmnet)
training_data <- read.csv("data/training-credit.csv")
x = model.matrix(Balance ~ ., training_data)[,-1]
y = training_data$Balance
grid = 10^seq(10,-2,length=100)
lasso_mod = cv.glmnet(x, y, alpha=1, lambda=grid)
# Save lasso model to RData file
save(lasso_mod, file="data/lasso.RData")
# Best lambda value
best_lambda = lasso_mod$lambda.min
best_lambda
set.seed (1234)
x = model.matrix(Balance ~ ., training_data)[,-1]
y = training_data$Balance
grid = 10^seq(10,-2,length=100)
lasso_mod = cv.glmnet(x, y, alpha=1, lambda=grid)
# Save lasso model to RData file
save(lasso_mod, file="data/lasso.RData")
# Best lambda value
library(glmnet)
best_lambda = lasso_mod$lambda.min
best_lambda
?cv.glmnet
x[training_data]
head(x)
?sample
sample(400)
y = training_data$Balance
y
?cv.glmnet
cv_out = cv.glmnet(x, y, alpha=1)
best_lambda = cv_out$lambda.min
best_lambda
a = glmnet(x, y, alpha=1, lambda=grid)
a
head(cv_out)
cv_out = cv.glmnet(x, y, alpha=1, lambda=grid)
plot(cv_out)
test_data <- read.csv("data/test-credit.csv")
test_x = model.matrix(Balance ~ ., test_data)[,-1]
lasso_mod = glmnet(train_x, train_y, alpha=1, lambda=grid)
train_x = model.matrix(Balance ~ ., training_data)[,-1]
train_y = training_data$Balance
library(glmnet)
lasso_mod = glmnet(train_x, train_y, alpha=1, lambda=grid)
?predict
lasso_pred = predict(lasso_mod, s = best_lambda, newx=test_x)
scaled_data <- read.csv("data/scaled-credit.csv")
mse = mean((lasso_pred-y)^2)
mse = mean((lasso_pred-test_y)^2)
test_y = test_data$Balance
mse = mean((lasso_pred-test_y)^2)
mse
test_mse = mean((lasso_pred-test_y)^2)
lasso_out = glmnet(scaled_x, scaled_y, alpha=1)
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_y = scaled_data$Balance
lasso_out = glmnet(scaled_x, scaled_y, alpha=1)
cv_out = cv.glmnet(train_x, train_y, alpha=1, intercept=FALSE, standardize=FALSE)
cv_out = cv.glmnet(train_x, train_y, alpha=1, intercept=FALSE, standardize=FALSE, lambda=grid)
best_lambda = cv_out$lambda.min
best_lambda
lasso_coef = predict(lasso_out,type="coefficients",s=best_lambda)
lasso_coef
View(scaled_data)
View(scaled_data)
View(test_data)
View(test_data)
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_x
scaled_data <- scale(new_data, center = TRUE, scale = TRUE)
head(scaled_data)
scaled_data <- scaled_data[sample(400),]
head(scaled_data)
training_data <- scaled_data[1:300, ]
head(training_data)
training_data <- scaled_data[1:300, ]
write.csv(training_data, file = "data/training-credit.csv")
test_data <- scaled_data[301:400, ]
write.csv(test_data, file = "data/test-credit.csv")
scaled_data <- read.csv("data/scaled-credit.csv")
training_data <- read.csv("data/training-credit.csv")
test_data <- read.csv("data/test-credit.csv")
set.seed (1234)
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_y = scaled_data$Balance
test_x = model.matrix(Balance ~ ., test_data)[,-1]
test_y = test_data$Balance
train_x = model.matrix(Balance ~ ., training_data)[,-1]
train_y = training_data$Balance
grid = 10^seq(10,-2,length=100)
lasso_mod = glmnet(train_x, train_y, alpha=1, lambda=grid)
cv_out = cv.glmnet(train_x, train_y, alpha=1, intercept=FALSE, standardize=FALSE, lambda=grid)
# Best lambda value
best_lambda = cv_out$lambda.min
# Plot cross-validation errors in terms of the tuning parameter (lambda)
plot(cv_out)
lasso_pred = predict(lasso_mod, s = best_lambda, newx=test_x)
# Mean squared error for the test values
test_mse = mean((lasso_pred-test_y)^2)
lasso_out = glmnet(scaled_x, scaled_y, alpha=1, lambda=grid)
lasso_coef = predict(lasso_out,type="coefficients",s=best_lambda)
# Save cross validation output, best lambda, mse, and coefficients to RData file
best_lamnda
best_lambda
lasso_coef = predict(lasso_out,type="coefficients",s=best_lambda)
lasso_coef
lasso_coef[1:11,]
lasso_coef[1:13,]
View(training_data)
View(test_data)
training_data <- scaled_data[1:300, ]
scaled_data <- scale(new_data, center = TRUE, scale = TRUE)
write.csv(scaled_data, file = "data/scaled-credit.csv")
set.seed(1234)
floor = 300
scaled_data <- scaled_data[sample(400),]
training_data <- scaled_data[1:300, ]
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_data <- read.csv("data/scaled-credit.csv")[]
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_x
head(scaled_x)
?read.csv
scaled_data <- read.csv("data/scaled-credit.csv")[, -1]
head(scaled_data)
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
head(scaled_x)
scaled_data <- read.csv("data/scaled-credit.csv")[, -1]
training_data <- read.csv("data/training-credit.csv")[, -1]
test_data <- read.csv("data/test-credit.csv")[, -1]
set.seed (1234)
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_y = scaled_data$Balance
test_x = model.matrix(Balance ~ ., test_data)[,-1]
test_y = test_data$Balance
train_x = model.matrix(Balance ~ ., training_data)[,-1]
train_y = training_data$Balance
grid = 10^seq(10,-2,length=100)
lasso_mod = glmnet(train_x, train_y, alpha=1, lambda=grid)
cv_out = cv.glmnet(train_x, train_y, alpha=1, intercept=FALSE, standardize=FALSE, lambda=grid)
# Best lambda value
best_lambda = cv_out$lambda.min
# Plot cross-validation errors in terms of the tuning parameter (lambda)
plot(cv_out)
lasso_pred = predict(lasso_mod, s = best_lambda, newx=test_x)
# Mean squared error for the test values
test_mse = mean((lasso_pred-test_y)^2)
lasso_out = glmnet(scaled_x, scaled_y, alpha=1, lambda=grid)
lasso_coef = predict(lasso_out,type="coefficients",s=best_lambda)
# Save cross validation output, best lambda, mse, and coefficients to RData file
save(cv_out, best_lambda, test_mse, file="data/lasso_cv.RData")
best_lambda
lasso_coef = predict(lasso_out,type="coefficients",s=best_lambda)[1:12,]
lasso_coef
save(cv_out, best_lambda, test_mse, lasso_coef, file="data/lasso_cv.RData")
save(cv_out, best_lambda, test_mse, lasso_coef, file="data/lasso.RData")
png(filename="images/Lasso_CV_plot.png")
plot(cv_out)
dev.off()
png(filename="images/Lasso_CV_plot.png", width = 800, height = 600)
plot(cv_out)
dev.off()
scaled_data <- read.csv("data/datasets/scaled-credit.csv")[, -1]
training_data <- read.csv("data/datasets/training-credit.csv")[, -1]
test_data <- read.csv("data/datasets/test-credit.csv")[, -1]
set.seed(1234)
pls_fit = plsr(Balance ~ ., data=training_data ,subset=train,scale=TRUE, validation="CV")
library(glmnet)
pls_fit = plsr(Balance ~ ., data=training_data ,subset=train,scale=TRUE, validation="CV")
install.packages("pls")
pls_fit = plsr(Balance ~ ., data=training_data ,subset=train,scale=TRUE, validation="CV")
library(pls)
pls_fit = plsr(Balance ~ ., data=training_data ,subset=train,scale=TRUE, validation="CV")
pls_fit = plsr(Balance ~ ., data=training_data,scale=TRUE, validation="CV")
pls_fit
summary(pls_fit)
pls_fit$Validation$PRESS
pls_fit$validation$PRESS
validationplot(pls_fit,val.type="MSEP")
validationplot(pls_fit, val.type="MSEP")
pls_fit$validation
pls_fit$validation$PRESS
min(pls_fit$validation$PRESS)
a = pls_fit$validation$PRESS
which.min(a)
pls_pred = predict(pls_fit, test_x, ncomp=comp)
comp = which.min(pls_fit$validation$PRESS)
pls_pred = predict(pls_fit, test_x, ncomp=comp)
mse = mean((pls_pred-test_y)^2)
mse
pls_out = plsr(Balance ~ ., data=scaled_data ,scale=TRUE,ncomp=comp)
pls_out
pls_out$coefficients
pls_out$coefficients[, , 11]
pls_out$coefficients[, , comp]
coeff = pls_out$coefficients[, , comp]
pls_fit$validation$PRESS
png(filename="images/plsr_validationplot.png")
validationplot(pls_fit, val.type="MSEP")
dev.off()
save(pls_fit, comp, mse, coeff, "data/plsr.RData")
save(pls_fit, comp, mse, coeff, file="data/plsr.RData")
sink("data/plsr.txt")
coeff
"TestMSE:"
mse
"Best Number of Components:"
comp
sink()
library(pander)
pander(coeff)
sink("data/plsr.txt")
pander(coeff)
"\nTestMSE:\n"
mse
"\nBest Number of Components:\n"
comp
sink()
sink("data/plsr.txt")
pander(coeff)
writeLines("\nTest MSE:\n")
mse
writeLines("\nBest Number of Components:\n")
comp
sink()
