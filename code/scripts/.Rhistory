# and again with beside = FALSE. Determine which of these
# barplots provides the easiest comparison.
athTab = table(athletes$Sex, athletes$Sport)
# make two barplots
barplot(athTab, beside=TRUE, cex.names=0.7, las=2)
barplot(athTab, beside=FALSE, cex.names=0.3)
# what should beside be set to, T/F?
set.beside = TRUE
### Barplot with beside = TRUE provides the easiest comparison.
#Q15. Remake the barplot above, but this time switch the order
# of Sport and Sex in the call to table(). Use the value for
# the beside parameter that you decided was best for the
# plot in Q 14.
athTab2 = table(athletes$Sport, athletes$Sex)
barplot(athTab2, beside=TRUE)
# Compare the barplot with (Sex, Sport) vs (Sport, Sex).
# Which makes a more interesting visual comparison, plot 1 or 2?
# store your answer (1 or 2) in best.plot.
best.plot = 1
barplot(athTab, beside=TRUE, cex.names=0.7, las=2)
# Q16. Notice that the bars are in alphabetical order by sport.
# To facilitate comparisons, we might want to arrange
# the bars in order of participation in a sport. To do this,
# call order() on the return value from making a table of Sport alone.
# Assign this vector to a variable, say orderSport.
# Then reorder your two-way table of Sport and Sex,
# using the orderSport vector and [ ] to subset the table and rearrange
# the rows/cols. The resulting barplot should show bars in
# increasing height.
orderSport = order(table(athletes$Sport))
athTab_Final = table(athletes$Sex, athletes$Sport)[ ,c(orderSport)]
barplot(athTab_Final, beside=TRUE, cex.names=0.7, las=2)
# Q17. Finally to make the plot more informaation rich, try turning
# the x-axis labels on their side. To do this, find a parameter
# in par() that will rotate the x-axis tick mark labels. Even though
# you found the parameter in the par() function, this
# parameter can be added in the call to barplot().
# Also find and use a parameter to shrink the text for these labels.
# Lastly, add a title to the plot.
barplot(athTab_Final, beside=TRUE, cex.names=0.7, las=2, ylab="Counts", main="London 2012 Olympics: Gender and Sports", col=c("tomato","royalblue4"))
legend(x="topleft", y=800, legend=c("Female","Male"), fill=c("tomato","royalblue4"))
# This was the final version of the 4th plot.
# You are DONE.
# Hope you had fun making increasingly complex and attractive plots with R.
Credit <- read.csv("~/Documents/stat159/stat159-fall2016-project2/data/datasets/Credit.csv")
View(Credit)
load("../../data/Ridge.Rdata")
setwd("~/Documents/stat159/stat159-fall2016-project2/code/scripts")
load("../../data/Ridge.Rdata")
library(glmnet)
scaled_data <- read.csv("data/datasets/scaled-credit.csv")[, -1]
training_data <- read.csv("data/datasets/training-credit.csv")[, -1]
test_data <- read.csv("data/datasets/test-credit.csv")[, -1]
set.seed (1234)
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_y = scaled_data$Balance
test_x = model.matrix(Balance ~ ., test_data)[,-1]
test_y = test_data$Balance
train_x = model.matrix(Balance ~ ., training_data)[,-1]
train_y = training_data$Balance
grid = 10^seq(10,-2,length=100)
lasso_mod = glmnet(train_x, train_y, alpha=1, lambda=grid)
cv_out = cv.glmnet(train_x, train_y, alpha=1, intercept=FALSE, standardize=FALSE, lambda=grid)
# Best lambda value
best_lambda = cv_out$lambda.min
# Save plot for cross-validation errors in terms of the tuning parameter (lambda)
png(filename="images/Lasso_MSE.png", width = 800, height = 600)
plot(cv_out)
dev.off()
# Calculate test values given the best lambda
lasso_pred = predict(lasso_mod, s = best_lambda, newx=test_x)
# Mean squared error for the test values
test_mse = mean((lasso_pred-test_y)^2)
# Refit the lasso model on the whole data set
lasso_out = glmnet(scaled_x, scaled_y, alpha=1, lambda=grid)
# Determine the coefficients given the best value of lambda
lasso_coef = predict(lasso_out,type="coefficients",s=best_lambda)[1:12,]
# Save cross validation output, best lambda, mse, and coefficients to RData file
save(cv_out, best_lambda, test_mse, lasso_coef, file="data/lasso.RData")
# Write coefficients, best lambda, and mse to a text file
sink("data/Lasso.txt")
lasso_coef
"TestMSE:"
test_mse
"Best Lambda:"
best_lambda
sink()
library(glmnet)
scaled_data <- read.csv("data/datasets/scaled-credit.csv")[, -1]
scaled_data <- read.csv("../../data/datasets/scaled-credit.csv")[, -1]
training_data <- read.csv("../../data/datasets/training-credit.csv")[, -1]
test_data <- read.csv("../../data/datasets/test-credit.csv")[, -1]
library(glmnet)
set.seed (1234)
scaled_x = model.matrix(Balance ~ ., scaled_data)[,-1]
scaled_y = scaled_data$Balance
test_x = model.matrix(Balance ~ ., test_data)[,-1]
test_y = test_data$Balance
train_x = model.matrix(Balance ~ ., training_data)[,-1]
train_y = training_data$Balance
grid = 10^seq(10,-2,length=100)
lasso_mod = glmnet(train_x, train_y, alpha=1, lambda=grid)
cv_out = cv.glmnet(train_x, train_y, alpha=1, intercept=FALSE, standardize=FALSE, lambda=grid)
# Best lambda value
best_lambda = cv_out$lambda.min
# Save plot for cross-validation errors in terms of the tuning parameter (lambda)
png(filename="images/Lasso_MSE.png", width = 800, height = 600)
plot(cv_out)
dev.off()
save(cv_out, best_lambda, test_mse, lasso_coef, file="../../data/lasso.RData")
# Write coefficients, best lambda, and mse to a text file
sink("data/Lasso.txt")
save(cv_out, best_lambda, test_mse, lasso_coef, file="../../data/lasso.RData")
best_lambda = cv_out$lambda.min
# Save plot for cross-validation errors in terms of the tuning parameter (lambda)
png(filename="images/Lasso_MSE.png", width = 800, height = 600)
plot(cv_out)
dev.off()
png(filename="../../images/Lasso_MSE.png", width = 800, height = 600)
plot(cv_out)
dev.off()
# Calculate test values given the best lambda
lasso_pred = predict(lasso_mod, s = best_lambda, newx=test_x)
# Mean squared error for the test values
test_mse = mean((lasso_pred-test_y)^2)
# Refit the lasso model on the whole data set
lasso_out = glmnet(scaled_x, scaled_y, alpha=1, lambda=grid)
# Determine the coefficients given the best value of lambda
lasso_coef = predict(lasso_out,type="coefficients",s=best_lambda)[1:12,]
# Save cross validation output, best lambda, mse, and coefficients to RData file
save(cv_out, best_lambda, test_mse, lasso_coef, file="../../data/lasso.RData")
sink("../../data/Lasso.txt")
lasso_coef
"TestMSE:"
test_mse
"Best Lambda:"
best_lambda
sink()
lasso_lambda = cv_out$lambda.min
lasso_pred = predict(lasso_mod, s = lasso_lambda, newx=test_x)
lasso_mse = mean((lasso_pred-test_y)^2)
lasso_out = glmnet(scaled_x, scaled_y, alpha=1, lambda=grid)
# Determine the coefficients given the best value of lambda
lasso_coef = predict(lasso_out,type="coefficients",s=lasso_lambda)[1:12,]
save(cv_out, lasso_lambda, lasso_mse, lasso_coef, file="../../data/lasso.RData")
pls_fit = plsr(Balance ~ ., data=training_data,scale=TRUE, validation="CV")
library(pls)
pls_fit = plsr(Balance ~ ., data=training_data,scale=TRUE, validation="CV")
pls_comp = which.min(pls_fit$validation$PRESS)
# Save validation plot to png file
pls_pred = predict(pls_fit, test_x, ncomp=pls_comp)
pls_mse = mean((pls_pred-test_y)^2)
pls_out = plsr(Balance ~ ., data=scaled_data ,scale=TRUE,ncomp=pls_comp)
pls_coeff = pls_out$coefficients[, , pls_comp]
save(pls_fit, pls_comp, pls_mse, pls_coeff, file="../../data/plsr.RData")
load("../../data/lasso.Rdata")
load("../../data/plsr.Rdata")
load("../../data/pcr.Rdata")
test_mses[12]
mse
ridge_mse = mse
pcr_mse = test_mses[12]
ridge_coeff = coef(fsv)
load("../../data/Ridge.Rdata")
ridge_coeff = coef(fcv)
pcr_coeff = best_coefs
ridge_coeff
pcr_coeff
pls_coeff
lasso_coeff
lasso_coeff = predict(lasso_out,type="coefficients",s=lasso_lambda)[1:12,]
save(cv_out, lasso_lambda, lasso_mse, lasso_coeff, file="../../data/lasso.RData")
load("../../data/lasso.Rdata")
lasso_coeff
lasso_mse
pls_mse
?table
table(lasso_coff, pls_coeff)
load("../../data/pcr.Rdata")
table(lasso_coeff, pls_coeff)
pls_coeff
lasso_coeff
lasso_coeff[-1]
lasso_coeff = lasso_coeff[-1]
table(lasso_coeff, pls_coeff)
matrix(lasso_coeff, pls_coeff)
matrix(c(unname(lasso_coeff), unname(pls_coeff)), ncol=11)
names(pls_coeff)
vars = names(pls_coeff)
matrix(c(unname(lasso_coeff), unname(pls_coeff)), ncol=11, colnames=vars)
coeff_mat = matrix(c(unname(lasso_coeff), unname(pls_coeff)), ncol=11)
ridge_coeff
ridge_coeff[1:12,]
ridge_coeff[2:12,]
pcr_coeff
ridge_coeff = coef(fcv)[2:12,]
full_pcr_model$coefficients
full_pcr_model$coefficients[, , 12]
full_pcr_model$coefficients[, , 12][-1]
best_coefs <- full_pcr_model$coefficients[, , 12][-1]
sink("../../data/pcr.txt")
best_coefs
"testMSE:"
test_mses[12]
save.image(file = "../../data/pcr.Rdata")
load("../../data/pcr.Rdata")
pcr_coeff = best_coefs
coeff_mat = matrix(c(unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11)
table(coeff_mat)
as.table(coeff_mat)
coeff_mat
coeff_mat = matrix(c(unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11)
coeff_mat
ridge_coeff
ridge_coeff = coef(fcv)[2:12,]
ridge_coeff
load("../../data/Ridge.Rdata")
ridge_coeff = coef(fcv)[2:12,]
pcr_coeff = best_coefs
pls_coeff
lasso_coeff = lasso_coeff[-1]
ridge_coeff
ridge_coeff = coef(fcv)[2:12,]
ridge_coeff
a
mtcars
sink)()
sink()
sink("data/pcr.txt")
best_coefs
"testMSE:"
test_mses[12]
sink()
sink("../../data/pcr.txt")
best_coefs
"testMSE:"
test_mses[12]
sink()
coeff_mat = matrix(c(unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11)
ridge_coeff
lasso_coeff
load("../../data/lasso.Rdata")
coeff_mat = matrix(c(unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11)
lasso_coeff
lasso_coeff = predict(lasso_out,type="coefficients",s=lasso_lambda)[2:12,]
save(cv_out, lasso_lambda, lasso_mse, lasso_coeff, file="../../data/lasso.RData")
load("../../data/lasso.Rdata")
coeff_mat = matrix(c(unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11)
coeff_mat
as.table(coeff_mat)
?as.table
as.table(coeff_mat, col.names=vars)
colnames(o) = vars
coeff_table = as.table(coeff_mat, col.names=vars)
colnames(coeff_mat) = vars
rownames(coeff_mat) = c("Ridge", "Lasso", "PCR", "PLSR")
coeff_table = as.table(coeff_mats)
coeff_table = as.table(coeff_mat)
coeff_table
library(ggplot)
library(ggplot2)
ggplot(coeff_table)
?facet_wrap
facet_wrap(coeff_table)
plot(coeff_table)
facet_wrap(coeff_mat)
ggplot(coeff_mat)
ggplot(facet_wrap(coeff_mat))
ggplot(unname(ridge_coeff))
?ggplot
?as.dataframe
?as.df
?as.data.frame
as.data.frame(ridge_coeff)
ggplot(as.data.frame(ridge_coeff))
plot(mtcars)
as.data.frame(coeff_mat)
ggplot(as.data.frame(coeff_mat))
ggplot(mtcars)
ggplot(as.data.frame(coeff_mat)) + geombar()
ggplot(as.data.frame(coeff_mat)) + geom_bar()
ggplot(mtcars) + geom_bar()
qplot(mtcars)
qplot(as.data.frame(coeff_mat))
ggplot(as.data.frame(coeff_mat), aes(x = Income)) +
geom_histogram()
ggplot(as.data.frame(coeff_mat)) +
geom_histogram()
?facet_wrap
facet_wrap(ridge_coeff)
coeff_plot = ggplot(as.data.frame(coeff_mat)) + geom_bar()
coeff_plot
ggplot(as.data.frame(coeff_mat)) + geom_bar()
as.data.frame(coeff_mat)
?melt
library(reshape2)
?melt
a = melt(coeff_mat)
a
ggplot(a) + geom_bar()
plot(as.data.frame(coeff_mat))
ggplot(mtcars) + geom_bar()
plot(ridge_coeff)
ggplot(ridge_coeff)
ggplot(unname(ridge_coeff)) + geom_bar()
ggplot(unname(ridge_coeff), aes(x=)) + geom_bar()
ridge_coeff
ggplot(as.data.frame(coeff_mat), aes=(x=vars))
ggplot(as.data.frame(coeff_mat), aes=(x=vars)) + geom_bar()
as.data.frame(ridge_coeff)
a = as.data.frame(ridge_coeff)
a[1]
a[,1]
a[,0]
coeff_mat = t(matrix(c(unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11))
coeff_mat
scaled_data <- read.csv("../../data/datasets/scaled-credit.csv")[, -1]
head(scaled_dta)
head(scaled_data)
lm(Balance~Income+Limit+Rating+Cards+Age+Eduation+GenderFemale+StudentYes+MarriedYes+EthnicityAsian+EthnicityCaucasian, data=scaled_data)
lm(Balance~Income+Limit+Rating+Cards+Age+Education+GenderFemale+StudentYes+MarriedYes+EthnicityAsian+EthnicityCaucasian, data=scaled_data)
ols = lm(Balance~Income+Limit+Rating+Cards+Age+Education+GenderFemale+StudentYes+MarriedYes+EthnicityAsian+EthnicityCaucasian, data=scaled_data)
ols$coefficients
ols_coeff = ols$coefficients[-1]
ols_coeff
ols$residuals
ols$residuals^2
ols_mse = mean(ols$residuals^2)
ols_mse
ols_coeff
coeff_mat = t(matrix(c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11))
colnames(coeff_mat) = vars
rownames(coeff_mat) = c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
vars = names(pls_coeff)
coeff_mat = t(matrix(c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11))
colnames(coeff_mat) = vars
coeff_mat = t(matrix(c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11))
rownames(coeff_mat) = vars
colnames(coeff_mat) = c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
coeff_mat
coeff_table = as.table(coeff_mat)
coeff_table
lasso_mse
coeff_plot = ggplot(as.data.frame(coeff_mat)) + geom_bar()
coeff_plot
plot(as.data.frame(coeff_mat)$ols)
as.data.frame(coeff_mat)
as.data.frame(coeff_mat)$OLS
plot(as.data.frame(coeff_mat)$OLS)
b = factor(as.data.frame(coeff_mat)$OLS, labels=vars)
b
plot(b)
as.data.frame(coeff_mat)$OLS
plot(as.data.frame(coeff_mat)$OLS)
plot(as.data.frame(coeff_mat)$OLS, xlab=vars)
plot(c ~ b)
b
vars
plot(c ~ vars)
factor(vars)
plot(c ~ factor(vars))
c
c = as.data.frame(coeff_mat)$OLS
c
plot(c ~ factor(vars))
vars
factor(c, vars)
factor(c, levels=vars)
factor(c)
vars
vars
factor(c, vars)
vars
coeff_mat$Income
coeff_mat
coeff_mat$OLS
options("scipen" = 100, "digits" = 1)
vars = names(pls_coeff)
coeff_mat = t(matrix(c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11))
rownames(coeff_mat) = vars
colnames(coeff_mat) = c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
coeff_mat = t(matrix(c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), ncol=11))
rownames(coeff_mat) = vars
colnames(coeff_mat) = c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
coeff_table = as.table(coeff_mat)
ggplot(as.data.frame(coeff_mat), aes(x=gender, y = Freq, fill=fraud)) + geom_bar(stat="identity")
coeff_table
?structure
?list
censusData <- structure(list(Year = c(2012L, 2007L, 2012L, 2007L, 2012L, 2007L,
2012L, 2007L, 2012L, 2007L, 2012L, 2007L, 2012L, 2007L, 2012L,
2007L, 2012L, 2007L, 2012L, 2007L, 2012L, 2007L, 2012L, 2007L
), County = c("A", "A", "B", "B", "C", "C", "Sum", "Sum", "A",
"A", "B", "B", "C", "C", "Sum", "Sum", "A", "A", "B", "B", "C",
"C", "Sum", "Sum"), variable = structure(c(1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L), .Label = c("Total_Revenue", "Crop_Revenue", "Livestock_Revenue"
), class = "factor"), value = c(1645.51, 1203.806, 68.911, 60.949,
923.163, 525.918, 2637.584, 1790.673, 1069.497, 787.459, 47.157,
38.735, 825.050228, 470.024, 1941.704228, 1296.218, 576.013,
416.347, 21.754, 22.214, 98.112772, 55.894, 695.879772, 494.455
)), row.names = c(NA, -24L), .Names = c("Year", "County", "variable",
"value"), class = "data.frame")
censusData
coeff_mat
as.data.frame(ridge_coeff)
data.frame(vars, unname(ridge_coeff))
"OLS" * 11
rep("OLS", 11)
a = rep("OLS", 11)
data.frame(vars, unname(ols_coeff), rep("OLS", 11))
?data.frame
a= data.frame(vars, unname(ols_coeff), rep("OLS", 11))
a = data.frame(vars, unname(ols_coeff), rep("OLS", 11))
colnames(a) = c("vars", "coeff", "model")
a
rep(vars, 5)
a
a = data.frame(rep(vars, 5), c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(plsr_coeff)), c(rep("OLS", 11), rep("Ridge", 11), rep("Lasso", 11), rep("PCR", 11), rep("PLSR", 11)))
a = data.frame(rep(vars, 5), c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), c(rep("OLS", 11), rep("Ridge", 11), rep("Lasso", 11), rep("PCR", 11), rep("PLSR", 11)))
a
colnames(a) = c("vars", "coeff", "model")
a
coeff_df = data.frame(rep(vars, 5), c(unname(ols_coeff), unname(ridge_coeff), unname(lasso_coeff), unname(pcr_coeff), unname(pls_coeff)), c(rep("OLS", 11), rep("Ridge", 11), rep("Lasso", 11), rep("PCR", 11), rep("PLSR", 11)))
colnames(coeff_df) = c("vars", "coeff", "model")
ggplot(coeff_df, aes(vars, coeff)) + geom_bar()
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model))
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model))
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity")
ols_coeff
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_wrap( ~ model, ncol=2)
coeff_df$vars = factor(coeff_df$vars, levels=coeff_df$vars)
coeff_df$model = factor(coeff_df$model, levels=coeff_df$model)
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_wrap( ~ model, ncol=2)
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_grid( ~ model, ncol=2)
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_grid( ~ model)
melt(coeff_df)
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_grid( ~ model)
raw <- read.csv("http://pastebin.com/raw.php?i=L8cEKcxS",sep=",")
raw[,2]<-factor(raw[,2],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,3]<-factor(raw[,3],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,4]<-factor(raw[,4],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw
coeff_mat
coeff_df
raw
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + facet_grid( ~ model)
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity")
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Coefficient Value")
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value")
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value") + main("Comparison of Coefficients for Different Models")
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value") + ggtitle("Comparison of Coefficients for Different Models")
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value") + ggtitle("Comparison of Coefficient Values for Different Models")
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_grid( ~ model)
ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_wrap( ~ model)
ggplot(as.data.frame(coeff_mat), aes(x=gender, y = Freq, fill=fraud)) + geom_bar(stat="identity")
coeff_plot_separate = ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_wrap( ~ model)
coeff_plot_separate
coeff_plot_separate = ggplot(coeff_df, aes(vars, coeff)) + geom_bar(stat="identity") + facet_wrap( ~ model) + xlab("Predictor") + ylab("Coefficient Value") + ggtitle("Comparison of Coefficient Values for Different Models")
coeff_plot = ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value") + ggtitle("Comparison of Coefficient Values for Different Models")
coeff_plot_separate
mse_mat = t(matrix(c(ols_mse, ridge_mse, lasso_mse, pcr_mse, pls_mse), ncol=11))
rownames(mse_mat) = vars
colnames(mse_mat) = c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
mse_mat = t(matrix(c(ols_mse, ridge_mse, lasso_mse, pcr_mse, pls_mse), ncol=5))
rownames(mse_mat) = vars
colnames(mse_mat) = c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
mse_mat = t(matrix(c(ols_mse, ridge_mse, lasso_mse, pcr_mse, pls_mse)))
mse_mat
ols_Mse
ols_mse
ridge_mse
?optoins
?options
options("scipen" = 0)
mse_mat = t(matrix(c(ols_mse, ridge_mse, lasso_mse, pcr_mse, pls_mse)))
rownames(mse_mat) = vars
mse_mat
ridge_mse = mse
ridge_mse
pcr_mse = test_mses[12]
pcr_mse
set.seed(1234)
test_x = model.matrix(Balance ~ ., test_data)[,-1]
test_y = test_data$Balance
ols_coeff
options("scipen" = 0, "digits" = 7)
mse_mat = t(matrix(c(ols_mse, ridge_mse, lasso_mse, pcr_mse, pls_mse)))
mse_mat
rownames(mse_mat) = vars
mse_mat
rownames(mse_mat) = c("MSE")
colnames(mse_mat) = c("OLS", "Ridge", "Lasso", "PCR", "PLSR")
mse_mat
mse_table = as.table(mse_mat)
coeff_table
mse_table
coeff_plot
coeff_plot_separate
save(coeff_table, mse_table, coeff_plot, coeff_plot_separate, file="../../data/results.Rdata")
coeff_plot = ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value") + ggtitle("Comparison of Coefficient Values for Different Models") + theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
coeff_plot
coeff_plot = ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value") + ggtitle("Comparison of Coefficient Values for Different Models") + theme(text = element_text(size=10),
axis.text.x = element_text(angle=90, vjust=1))
coeff_plot
coeff_plot = ggplot(coeff_df, aes(vars, coeff)) + geom_bar(aes(fill = model), position = "dodge", stat="identity") + xlab("Predictor") + ylab("Coefficient Value") + ggtitle("Comparison of Coefficient Values for Different Models") + theme(text = element_text(size=15),
axis.text.x = element_text(angle=90, vjust=1))
coeff_plot
save(coeff_table, mse_table, coeff_plot, coeff_plot_separate, file="data/results.Rdata")
# single multibar plot
save(coeff_table, mse_table, coeff_plot, coeff_plot_separate, file="../../data/results.Rdata")
